{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,QAChCC,EAAa,EACbC,EAAY,EACZC,EAAc,EA8BlB,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,aAAY,WACNN,EACFI,EAAQ,CAAEN,WAAUC,UAGpBM,EAAO,CAAEP,WAAUC,S,GAGpBA,E,IAtCPR,EAAKgB,iBAAiB,UAEtB,SAAuBC,GACrBA,EAAEC,iBACF,IAAgCC,EAAAF,EAAEG,cAAcC,SAAxCC,EAAwBH,EAAxBX,MAAOe,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACrBrB,EAAasB,OAAOH,EAAMI,OAC1BtB,EAAYqB,OAAOF,EAAKG,OACxBrB,EAAcoB,OAAOD,EAAOE,OAE5B,IAAK,IAAIC,EAAI,EAAGA,GAAKtB,EAAasB,GAAK,EAErCrB,EAAcqB,EADHxB,EAAaC,GAAauB,EAAI,IAEtCC,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAEjBsB,EAAAhC,GAASiC,OAAOC,QACd,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAGjD0B,OAAM,SAAAL,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAElBsB,EAAAhC,GAASiC,OAAOI,QACd,sBAAqCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('form');\nlet delayValue = 0;\nlet stepValue = 0;\nlet amountValue = 0;\nlet delayArg = 0;\n\nform.addEventListener('submit', onCallPromise);\n\nfunction onCallPromise(e) {\n  e.preventDefault();\n  const { delay, step, amount } = e.currentTarget.elements;\n  delayValue = Number(delay.value);\n  stepValue = Number(step.value);\n  amountValue = Number(amount.value);\n\n  for (let i = 1; i <= amountValue; i += 1) {\n    delayArg = delayValue + stepValue * (i - 1);\n    createPromise(i, delayArg)\n      .then(({ position, delay }) => {\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setInterval(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Fulfill\n      } else {\n        reject({ position, delay });\n        // Reject\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayValue","$ce04d3a99e08e73b$var$stepValue","$ce04d3a99e08e73b$var$amountValue","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setInterval","addEventListener","e","preventDefault","_elements","currentTarget","elements","delay1","step","amount","Number","value","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.353e9eed.js.map"}